{"version":3,"sources":["components/CreateTask.js","Todo.js","reportWebVitals.js","index.js"],"names":["CreateTask","addTask","useState","value","setValue","onSubmit","event","preventDefault","type","className","placeholder","onChange","e","target","Text","Typography","Task","task","index","completeTask","removeTask","style","textDecoration","completed","title","icon","CloseCircleOutlined","background","onClick","CheckCircleOutlined","Todo","taskRemaining","setTaskRemaining","taskDone","setTaskDone","id","timeline","tasks","setTasks","useEffect","filter","length","newTasks","splice","code","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAyBeA,EAtBI,SAAC,GAAc,IAAbC,EAAY,EAAZA,QACjB,EAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAaC,EAAb,KASA,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAMC,iBACFJ,IAEJF,EAAQE,GACRC,EAAS,MAGT,SACI,cAAC,IAAD,CACII,KAAK,OACLC,UAAU,QACVN,MAASA,EACTO,YAAY,wBACZC,SAAY,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOV,a,oCCb5CW,EAAQC,IAARD,KACDE,EAAO,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,WACtC,OACI,sBACIX,UAAU,OACVY,MAAS,CAACC,eAAgBL,EAAKM,UAAY,mBAAqB,IAFpE,UAIKN,EAAKO,MACN,cAAC,IAAD,CACIC,KAAQ,cAACC,EAAA,EAAD,IACRL,MAAS,CAACM,WAAY,OACtBC,QAAW,kBAAIR,EAAWF,MAE9B,cAAC,IAAD,CACIO,KAAQ,cAACI,EAAA,EAAD,IACRD,QAAW,kBAAIT,EAAaD,UA2E7BY,EAtEF,WACT,MAA0C5B,mBAAS,GAAnD,mBAAO6B,EAAP,KAAsBC,EAAtB,KACA,EAAgC9B,mBAAS,GAAzC,mBAAO+B,EAAP,KAAiBC,EAAjB,KACA,EAA0BhC,mBAAS,CAC/B,CACIiC,GAAI,EACJX,MAAO,SACPD,WAAW,EACXa,UAAU,MAEd,CACID,GAAI,EACJX,MAAO,SACPD,WAAW,GAEf,CACIY,GAAI,EACJX,MAAO,SACPD,WAAW,KAfnB,mBAAOc,EAAP,KAAcC,EAAd,KAkBAC,qBAAU,WACNP,EAAiBK,EAAMG,QAAO,SAACvB,GAAD,OAAWA,EAAKM,aAAWkB,WAE7DF,qBAAU,WACNL,EAAYG,EAAMG,QAAO,SAACvB,GAAD,OAASA,EAAKM,aAAWkB,WAGtD,IAIMtB,EAAe,SAACD,GAClB,IAAMwB,EAAQ,YAAOL,GACrBK,EAASxB,GAAOK,WAAW,EAC3Be,EAASI,IAEPtB,EAAa,SAACF,GAChB,IAAMwB,EAAQ,YAAOL,GACrBK,EAASC,OAAOzB,EAAO,GACvBoB,EAASI,IAEb,OACI,sBAAKjC,UAAY,iBAAjB,UACI,sBAAKA,UAAY,SAAjB,UACI,qBAAKA,UAAY,WAAjB,SACI,eAACK,EAAD,CAAM8B,MAAI,EAAV,6CAAiCb,EAAjC,SAEJ,qBAAKtB,UAAY,WAAjB,SACI,eAACK,EAAD,CAAM8B,MAAI,EAAV,8CAA+BX,EAA/B,YAGR,qBAAKxB,UAAU,QAAf,SACK4B,EAAMQ,KAAI,SAAC5B,EAAKC,GAAN,OACP,cAAC,EAAD,CACID,KAAQA,EACRC,MAASA,EAETC,aAAiBA,EACjBC,WAAcA,GAFPF,QAMnB,qBAAKT,UAAU,cAAf,SACI,cAAC,EAAD,CAAYR,QApCR,SAACuB,GACb,IAAMkB,EAAQ,sBAAOL,GAAP,CAAc,CAACb,QAAMD,WAAW,KAC9Ce,EAASI,YC7CFI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.242f7581.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Input} from 'antd';\n\nconst CreateTask = ({addTask}) =>{\n    const [value,setValue] = useState(\"\");\n    \n    const handleSubmit = (event) =>{\n        event.preventDefault();\n        if(!value) return;\n\n        addTask(value);\n        setValue(\"\");\n    }\n    return(\n        <form onSubmit={handleSubmit}>\n            <Input\n                type=\"text\"\n                className=\"input\"\n                value = {value}\n                placeholder=\"Thêm task mới\"\n                onChange = {e => setValue(e.target.value)}\n            />\n        </form>\n    );\n};\nexport default CreateTask;\n","import React, { useEffect, useState } from 'react';\nimport \"./Todo.css\";\nimport CreateTask from './components/CreateTask';\nimport {Button} from 'antd';\nimport { Typography } from 'antd';\nimport {CheckCircleOutlined, CloseCircleOutlined} from \"@ant-design/icons\";\n\nconst {Text} = Typography;\nconst Task = ({task, index, completeTask, removeTask}) => {\n    return(\n        <div\n            className=\"task\"\n            style = {{textDecoration: task.completed ? \"line-through red\" : \"\"}}\n        >\n            {task.title}\n            <Button\n                icon = {<CloseCircleOutlined/>}\n                style = {{background: \"red\"}}\n                onClick = {()=>removeTask(index)}\n            ></Button>\n            <Button\n                icon = {<CheckCircleOutlined/>}\n                onClick = {()=>completeTask(index)}\n            ></Button>\n        </div>\n    );\n};\nconst Todo = () =>{\n    const [taskRemaining, setTaskRemaining] = useState(0);\n    const [taskDone, setTaskDone] = useState(0);\n    const [tasks, setTasks] = useState([\n        {\n            id: 1,\n            title: \"Task 1\",\n            completed: true,\n            timeline: 3-10-2021\n        },\n        {\n            id: 2,\n            title: \"Tast 2\",\n            completed: false,\n        },\n        {\n            id: 3,\n            title: \"Task 3\",\n            completed: false,\n        }\n    ])\n    useEffect(()=>{\n        setTaskRemaining(tasks.filter((task) => !task.completed).length);\n    })\n    useEffect(()=>{\n        setTaskDone(tasks.filter((task)=> task.completed).length);\n    })\n\n    const addTask = (title) =>{\n        const newTasks = [...tasks, {title,completed: false}];\n        setTasks(newTasks);\n    };\n    const completeTask = (index ) =>{\n        const newTasks = [...tasks];\n        newTasks[index].completed= true;\n        setTasks(newTasks);\n    };\n    const removeTask = (index) =>{\n        const newTasks = [...tasks];\n        newTasks.splice(index, 1);\n        setTasks(newTasks);\n    };\n    return (\n        <div className = \"todo-container\">\n            <div className = \"header\">\n                <div className = \"header-1\">\n                    <Text code>Task chưa hoàn thành({taskRemaining})</Text>\n                </div>\n                <div className = \"header-2\">\n                    <Text code>Task đã hoàn thành({taskDone})</Text>\n                </div>\n            </div>\n            <div className=\"tasks\">\n                {tasks.map((task,index)=>(\n                    <Task\n                        task = {task}\n                        index = {index}\n                        key = {index}\n                        completeTask  = {completeTask}\n                        removeTask = {removeTask}\n                    /> \n                ))}\n            </div>\n            <div className=\"create-task\">\n                <CreateTask addTask={addTask}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Todo;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './Todo';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}